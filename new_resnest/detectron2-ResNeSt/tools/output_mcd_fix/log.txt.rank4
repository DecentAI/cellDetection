[01/11 13:42:18] detectron2 INFO: Rank of current process: 4. World size: 8
[01/11 13:42:18] detectron2 INFO: Environment info:
------------------------  ---------------------------------------------------------------------------------------------
sys.platform              linux
Python                    3.10.8 (main, Nov 24 2022, 14:13:03) [GCC 11.2.0]
numpy                     1.23.5
detectron2                0.1.1 @/lunit/home/stevekang/decentAI/cellDetection/detectron2-ResNeSt/detectron2
detectron2 compiler       GCC 5.4
detectron2 CUDA compiler  10.1
detectron2 arch flags     sm_61
DETECTRON2_ENV_MODULE     <not set>
PyTorch                   1.12.0+cu102 @/home/stevekang/anaconda3/envs/resnest/lib/python3.10/site-packages/torch
PyTorch debug build       False
CUDA available            True
GPU 0,1,2,3,4,5,6,7       TITAN Xp
CUDA_HOME                 /usr/local/cuda
NVCC                      Cuda compilation tools, release 10.1, V10.1.243
Pillow                    9.3.0
torchvision               0.13.0+cu102 @/home/stevekang/anaconda3/envs/resnest/lib/python3.10/site-packages/torchvision
torchvision arch flags    sm_35, sm_50, sm_60, sm_70, sm_75
cv2                       4.6.0
------------------------  ---------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/11 13:42:18] detectron2 INFO: Command line arguments: Namespace(config_file='../configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', resume=False, eval_only=True, num_gpus=8, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:51261', opts=['MODEL.WEIGHTS', '../../../detectron2-ResNeSt/tools/output/model_final.pth'])
[01/11 13:42:18] detectron2 INFO: Contents of args.config_file=../configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml:
_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  MASK_ON: True
  RESNETS:
    DEPTH: 50

[01/11 13:42:18] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('MCF7',)
  TRAIN: ('MCF7',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32], [64], [128], [256], [512]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    AVD: False
    AVG_DOWN: False
    BOTTLENECK_WIDTH: 64
    DEEP_STEM: False
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res2', 'res3', 'res4', 'res5']
    RADIX: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: 
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: ../../../detectron2-ResNeSt/tools/output/model_final.pth
OUTPUT_DIR: ./output_mcd_fix
SEED: -1
SOLVER:
  BASE_LR: 0.02
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 90000
  MOMENTUM: 0.9
  STEPS: (60000, 80000)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[01/11 13:42:18] detectron2.utils.env INFO: Using a generated random seed 18611577
[01/11 13:42:19] detectron2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (dropout): Dropout(p=0.3, inplace=False)
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=81, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=320, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (predictor): Conv2d(256, 80, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[01/11 13:42:19] fvcore.common.checkpoint INFO: Loading checkpoint from ../../../detectron2-ResNeSt/tools/output/model_final.pth
[01/11 13:42:23] detectron2.data.datasets.coco INFO: Loading /lunit/home/stevekang/decentAI/cellDetection/MCF7/LIVECell_dataset_2021/annotations/LIVECell_single_cells/mcf7/train.json takes 3.40 seconds.
[01/11 13:42:23] detectron2.data.datasets.coco INFO: Loaded 469 images in COCO format from /lunit/home/stevekang/decentAI/cellDetection/MCF7/LIVECell_dataset_2021/annotations/LIVECell_single_cells/mcf7/train.json
[01/11 13:42:24] detectron2.data.build INFO: Distribution of instances among all 1 categories:
[36m|  category  | #instances   |
|:----------:|:-------------|
|    cell    | 212688       |
|            |              |[0m
[01/11 13:42:24] detectron2.data.common INFO: Serializing 469 elements to byte tensors and concatenating them all ...
[01/11 13:42:24] detectron2.data.common INFO: Serialized dataset takes 77.04 MiB
[01/11 13:42:27] detectron2.evaluation.evaluator INFO: Start inference on 59 images
[01/11 13:42:37] detectron2.evaluation.evaluator INFO: Inference done 11/59. 0.0625 s / img. ETA=0:00:03
[01/11 13:42:42] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:05.231799 (0.096885 s / img per device, on 8 devices)
[01/11 13:42:42] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:03 (0.063136 s / img per device, on 8 devices)
[01/11 13:44:58] detectron2 INFO: Rank of current process: 4. World size: 8
[01/11 13:44:58] detectron2 INFO: Environment info:
------------------------  ---------------------------------------------------------------------------------------------
sys.platform              linux
Python                    3.10.8 (main, Nov 24 2022, 14:13:03) [GCC 11.2.0]
numpy                     1.23.5
detectron2                0.1.1 @/lunit/home/stevekang/decentAI/cellDetection/detectron2-ResNeSt/detectron2
detectron2 compiler       GCC 5.4
detectron2 CUDA compiler  10.1
detectron2 arch flags     sm_61
DETECTRON2_ENV_MODULE     <not set>
PyTorch                   1.12.0+cu102 @/home/stevekang/anaconda3/envs/resnest/lib/python3.10/site-packages/torch
PyTorch debug build       False
CUDA available            True
GPU 0,1,2,3,4,5,6,7       TITAN Xp
CUDA_HOME                 /usr/local/cuda
NVCC                      Cuda compilation tools, release 10.1, V10.1.243
Pillow                    9.3.0
torchvision               0.13.0+cu102 @/home/stevekang/anaconda3/envs/resnest/lib/python3.10/site-packages/torchvision
torchvision arch flags    sm_35, sm_50, sm_60, sm_70, sm_75
cv2                       4.6.0
------------------------  ---------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/11 13:44:58] detectron2 INFO: Command line arguments: Namespace(config_file='../configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', resume=False, eval_only=True, num_gpus=8, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:51261', opts=['MODEL.WEIGHTS', 'http://livecell-dataset.s3.eu-central-1.amazonaws.com/LIVECell_dataset_2021/models/Anchor_free/ALL/LIVECell_anchor_free_model.pth'])
[01/11 13:44:58] detectron2 INFO: Contents of args.config_file=../configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml:
_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  MASK_ON: True
  RESNETS:
    DEPTH: 50

[01/11 13:44:58] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('MCF7',)
  TRAIN: ('MCF7',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32], [64], [128], [256], [512]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    AVD: False
    AVG_DOWN: False
    BOTTLENECK_WIDTH: 64
    DEEP_STEM: False
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res2', 'res3', 'res4', 'res5']
    RADIX: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: 
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: http://livecell-dataset.s3.eu-central-1.amazonaws.com/LIVECell_dataset_2021/models/Anchor_free/ALL/LIVECell_anchor_free_model.pth
OUTPUT_DIR: ./output_mcd_fix
SEED: -1
SOLVER:
  BASE_LR: 0.02
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 90000
  MOMENTUM: 0.9
  STEPS: (60000, 80000)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[01/11 13:44:58] detectron2.utils.env INFO: Using a generated random seed 58693893
[01/11 13:44:59] detectron2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (dropout): Dropout(p=0.3, inplace=False)
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=81, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=320, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (predictor): Conv2d(256, 80, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[01/11 13:44:59] fvcore.common.checkpoint INFO: Loading checkpoint from http://livecell-dataset.s3.eu-central-1.amazonaws.com/LIVECell_dataset_2021/models/Anchor_free/ALL/LIVECell_anchor_free_model.pth
[01/11 13:53:25] detectron2 INFO: Rank of current process: 4. World size: 8
[01/11 13:53:25] detectron2 INFO: Environment info:
------------------------  ---------------------------------------------------------------------------------------------
sys.platform              linux
Python                    3.10.8 (main, Nov 24 2022, 14:13:03) [GCC 11.2.0]
numpy                     1.23.5
detectron2                0.1.1 @/lunit/home/stevekang/decentAI/cellDetection/detectron2-ResNeSt/detectron2
detectron2 compiler       GCC 5.4
detectron2 CUDA compiler  10.1
detectron2 arch flags     sm_61
DETECTRON2_ENV_MODULE     <not set>
PyTorch                   1.12.0+cu102 @/home/stevekang/anaconda3/envs/resnest/lib/python3.10/site-packages/torch
PyTorch debug build       False
CUDA available            True
GPU 0,1,2,3,4,5,6,7       TITAN Xp
CUDA_HOME                 /usr/local/cuda
NVCC                      Cuda compilation tools, release 10.1, V10.1.243
Pillow                    9.3.0
torchvision               0.13.0+cu102 @/home/stevekang/anaconda3/envs/resnest/lib/python3.10/site-packages/torchvision
torchvision arch flags    sm_35, sm_50, sm_60, sm_70, sm_75
cv2                       4.6.0
------------------------  ---------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/11 13:53:25] detectron2 INFO: Command line arguments: Namespace(config_file='../configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', resume=False, eval_only=True, num_gpus=8, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:51261', opts=['MODEL.WEIGHTS', '../LIVECell_anchor_free_model.pth'])
[01/11 13:53:25] detectron2 INFO: Contents of args.config_file=../configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml:
_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  MASK_ON: True
  RESNETS:
    DEPTH: 50

[01/11 13:53:25] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('MCF7',)
  TRAIN: ('MCF7',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32], [64], [128], [256], [512]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    AVD: False
    AVG_DOWN: False
    BOTTLENECK_WIDTH: 64
    DEEP_STEM: False
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res2', 'res3', 'res4', 'res5']
    RADIX: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: 
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: ../LIVECell_anchor_free_model.pth
OUTPUT_DIR: ./output_mcd_fix
SEED: -1
SOLVER:
  BASE_LR: 0.02
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 90000
  MOMENTUM: 0.9
  STEPS: (60000, 80000)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[01/11 13:53:25] detectron2.utils.env INFO: Using a generated random seed 25618311
[01/11 13:53:26] detectron2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (dropout): Dropout(p=0.3, inplace=False)
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=81, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=320, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (predictor): Conv2d(256, 80, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[01/11 13:53:26] fvcore.common.checkpoint INFO: Loading checkpoint from ../LIVECell_anchor_free_model.pth
[01/11 13:53:26] fvcore.common.checkpoint WARNING: 'backbone.fpn_lateral4.weight' has shape (256, 768, 1, 1) in the checkpoint but (256, 1024, 1, 1) in the model! Skipped.
[01/11 13:53:26] fvcore.common.checkpoint WARNING: 'backbone.fpn_lateral5.weight' has shape (256, 1024, 1, 1) in the checkpoint but (256, 2048, 1, 1) in the model! Skipped.
[01/11 13:53:26] fvcore.common.checkpoint WARNING: 'roi_heads.mask_head.predictor.weight' has shape (1, 256, 1, 1) in the checkpoint but (80, 256, 1, 1) in the model! Skipped.
[01/11 13:53:26] fvcore.common.checkpoint WARNING: 'roi_heads.mask_head.predictor.bias' has shape (1,) in the checkpoint but (80,) in the model! Skipped.
[01/11 13:53:26] fvcore.common.checkpoint INFO: Some model parameters are not in the checkpoint:
  [34mbackbone.bottom_up.res4.0.shortcut.weight[0m
  [34mbackbone.bottom_up.res3.2.conv2.norm.{bias, weight}[0m
  [34mbackbone.fpn_output2.{weight, bias}[0m
  [34mbackbone.fpn_lateral2.{weight, bias}[0m
  [34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
  [34mbackbone.bottom_up.res5.0.conv3.weight[0m
  [34mbackbone.fpn_lateral4.weight[0m
  [34mbackbone.bottom_up.res5.0.conv3.norm.{bias, weight}[0m
  [34mproposal_generator.rpn_head.conv.{bias, weight}[0m
  [34mbackbone.bottom_up.res2.0.shortcut.weight[0m
  [34mbackbone.bottom_up.res4.2.conv1.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res2.0.conv2.norm.{weight, bias}[0m
  [34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
  [34mbackbone.bottom_up.res2.1.conv3.weight[0m
  [34mbackbone.bottom_up.res3.1.conv1.weight[0m
  [34mbackbone.bottom_up.stem.conv1.weight[0m
  [34mbackbone.bottom_up.res4.4.conv1.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res5.1.conv1.weight[0m
  [34mbackbone.bottom_up.stem.conv1.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res2.0.shortcut.norm.{bias, weight}[0m
  [34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
  [34mbackbone.bottom_up.res5.2.conv3.weight[0m
  [34mbackbone.bottom_up.res3.1.conv2.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res4.4.conv2.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res4.0.conv2.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res4.2.conv2.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res5.2.conv3.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res3.1.conv3.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res4.5.conv2.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res3.1.conv1.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res2.2.conv1.weight[0m
  [34mbackbone.bottom_up.res5.0.conv1.weight[0m
  [34mbackbone.bottom_up.res2.0.conv3.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res3.3.conv2.weight[0m
  [34mroi_heads.mask_head.predictor.{weight, bias}[0m
  [34mbackbone.bottom_up.res3.0.conv2.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res5.2.conv2.weight[0m
  [34mbackbone.bottom_up.res4.3.conv3.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res5.1.conv2.weight[0m
  [34mbackbone.bottom_up.res3.0.shortcut.weight[0m
  [34mbackbone.bottom_up.res2.2.conv1.norm.{bias, weight}[0m
  [34mproposal_generator.anchor_generator.cell_anchors.{2, 4, 0, 3, 1}[0m
  [34mbackbone.bottom_up.res4.0.conv3.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res3.3.conv1.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res4.4.conv3.weight[0m
  [34mbackbone.bottom_up.res5.2.conv1.weight[0m
  [34mbackbone.bottom_up.res3.2.conv3.weight[0m
  [34mroi_heads.box_predictor.bbox_pred.{weight, bias}[0m
  [34mbackbone.bottom_up.res5.0.conv1.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res5.0.conv2.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res4.1.conv3.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res3.3.conv1.weight[0m
  [34mbackbone.bottom_up.res5.0.shortcut.weight[0m
  [34mbackbone.bottom_up.res3.2.conv3.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res4.1.conv1.weight[0m
  [34mbackbone.bottom_up.res4.5.conv1.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res2.2.conv3.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res4.4.conv3.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res2.1.conv1.norm.{bias, weight}[0m
  [34mroi_heads.box_head.fc2.{bias, weight}[0m
  [34mbackbone.bottom_up.res3.3.conv3.weight[0m
  [34mbackbone.bottom_up.res5.0.shortcut.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res4.0.conv1.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res5.1.conv3.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res2.1.conv2.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res5.1.conv3.weight[0m
  [34mbackbone.bottom_up.res4.3.conv1.weight[0m
  [34mbackbone.bottom_up.res4.5.conv2.weight[0m
  [34mbackbone.bottom_up.res3.2.conv2.weight[0m
  [34mbackbone.bottom_up.res5.1.conv2.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res2.0.conv1.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res4.0.conv3.weight[0m
  [34mbackbone.bottom_up.res4.2.conv3.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res2.2.conv2.weight[0m
  [34mbackbone.bottom_up.res2.0.conv3.weight[0m
  [34mbackbone.bottom_up.res3.2.conv1.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res4.5.conv3.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res3.1.conv3.weight[0m
  [34mroi_heads.box_head.fc1.{bias, weight}[0m
  [34mbackbone.bottom_up.res3.0.shortcut.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res4.1.conv1.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res2.0.conv1.weight[0m
  [34mbackbone.bottom_up.res4.0.conv1.weight[0m
  [34mbackbone.bottom_up.res3.3.conv2.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res4.3.conv1.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res5.1.conv1.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res4.0.conv2.weight[0m
  [34mbackbone.bottom_up.res3.0.conv3.weight[0m
  [34mbackbone.bottom_up.res4.1.conv2.weight[0m
  [34mbackbone.bottom_up.res3.3.conv3.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res3.0.conv1.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res3.0.conv2.weight[0m
  [34mbackbone.bottom_up.res4.0.shortcut.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res4.2.conv1.weight[0m
  [34mbackbone.bottom_up.res2.2.conv2.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res4.3.conv2.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res3.0.conv3.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res4.1.conv3.weight[0m
  [34mbackbone.bottom_up.res2.1.conv3.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res3.1.conv2.weight[0m
  [34mbackbone.bottom_up.res4.1.conv2.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res2.1.conv1.weight[0m
  [34mbackbone.bottom_up.res4.3.conv2.weight[0m
  [34mbackbone.bottom_up.res4.2.conv2.weight[0m
  [34mbackbone.bottom_up.res3.2.conv1.weight[0m
  [34mbackbone.bottom_up.res4.3.conv3.weight[0m
  [34mbackbone.bottom_up.res2.0.conv2.weight[0m
  [34mbackbone.fpn_lateral5.weight[0m
  [34mbackbone.bottom_up.res5.2.conv2.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res4.5.conv1.weight[0m
  [34mbackbone.bottom_up.res4.4.conv2.weight[0m
  [34mbackbone.bottom_up.res4.4.conv1.weight[0m
  [34mbackbone.bottom_up.res2.1.conv2.weight[0m
  [34mbackbone.bottom_up.res2.2.conv3.weight[0m
  [34mbackbone.bottom_up.res4.5.conv3.weight[0m
  [34mbackbone.bottom_up.res5.0.conv2.weight[0m
  [34mbackbone.bottom_up.res5.2.conv1.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res4.2.conv3.weight[0m
  [34mbackbone.bottom_up.res3.0.conv1.weight[0m
[01/11 13:53:26] fvcore.common.checkpoint INFO: The checkpoint contains parameters not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
  [35mbackbone.top_block.p6.{weight, bias}[0m
  [35mbackbone.top_block.p7.{weight, bias}[0m
  [35mbackbone.bottom_up.stage2.OSA2_1.layers.0.OSA2_1_0/conv.weight[0m
  [35mbackbone.bottom_up.stage2.OSA2_1.layers.0.OSA2_1_0/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage2.OSA2_1.layers.1.OSA2_1_1/conv.weight[0m
  [35mbackbone.bottom_up.stage2.OSA2_1.layers.1.OSA2_1_1/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage2.OSA2_1.layers.2.OSA2_1_2/conv.weight[0m
  [35mbackbone.bottom_up.stage2.OSA2_1.layers.2.OSA2_1_2/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage2.OSA2_1.layers.3.OSA2_1_3/conv.weight[0m
  [35mbackbone.bottom_up.stage2.OSA2_1.layers.3.OSA2_1_3/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage2.OSA2_1.layers.4.OSA2_1_4/conv.weight[0m
  [35mbackbone.bottom_up.stage2.OSA2_1.layers.4.OSA2_1_4/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage2.OSA2_1.concat.OSA2_1_concat/conv.weight[0m
  [35mbackbone.bottom_up.stage2.OSA2_1.concat.OSA2_1_concat/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage2.OSA2_1.ese.fc.{weight, bias}[0m
  [35mbackbone.bottom_up.stage3.OSA3_1.layers.0.OSA3_1_0/conv.weight[0m
  [35mbackbone.bottom_up.stage3.OSA3_1.layers.0.OSA3_1_0/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage3.OSA3_1.layers.1.OSA3_1_1/conv.weight[0m
  [35mbackbone.bottom_up.stage3.OSA3_1.layers.1.OSA3_1_1/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage3.OSA3_1.layers.2.OSA3_1_2/conv.weight[0m
  [35mbackbone.bottom_up.stage3.OSA3_1.layers.2.OSA3_1_2/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage3.OSA3_1.layers.3.OSA3_1_3/conv.weight[0m
  [35mbackbone.bottom_up.stage3.OSA3_1.layers.3.OSA3_1_3/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage3.OSA3_1.layers.4.OSA3_1_4/conv.weight[0m
  [35mbackbone.bottom_up.stage3.OSA3_1.layers.4.OSA3_1_4/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage3.OSA3_1.concat.OSA3_1_concat/conv.weight[0m
  [35mbackbone.bottom_up.stage3.OSA3_1.concat.OSA3_1_concat/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage3.OSA3_1.ese.fc.{weight, bias}[0m
  [35mbackbone.bottom_up.stage3.OSA3_2.layers.0.OSA3_2_0/conv.weight[0m
  [35mbackbone.bottom_up.stage3.OSA3_2.layers.0.OSA3_2_0/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage3.OSA3_2.layers.1.OSA3_2_1/conv.weight[0m
  [35mbackbone.bottom_up.stage3.OSA3_2.layers.1.OSA3_2_1/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage3.OSA3_2.layers.2.OSA3_2_2/conv.weight[0m
  [35mbackbone.bottom_up.stage3.OSA3_2.layers.2.OSA3_2_2/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage3.OSA3_2.layers.3.OSA3_2_3/conv.weight[0m
  [35mbackbone.bottom_up.stage3.OSA3_2.layers.3.OSA3_2_3/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage3.OSA3_2.layers.4.OSA3_2_4/conv.weight[0m
  [35mbackbone.bottom_up.stage3.OSA3_2.layers.4.OSA3_2_4/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage3.OSA3_2.concat.OSA3_2_concat/conv.weight[0m
  [35mbackbone.bottom_up.stage3.OSA3_2.concat.OSA3_2_concat/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage3.OSA3_2.ese.fc.{weight, bias}[0m
  [35mbackbone.bottom_up.stage3.OSA3_3.layers.0.OSA3_3_0/conv.weight[0m
  [35mbackbone.bottom_up.stage3.OSA3_3.layers.0.OSA3_3_0/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage3.OSA3_3.layers.1.OSA3_3_1/conv.weight[0m
  [35mbackbone.bottom_up.stage3.OSA3_3.layers.1.OSA3_3_1/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage3.OSA3_3.layers.2.OSA3_3_2/conv.weight[0m
  [35mbackbone.bottom_up.stage3.OSA3_3.layers.2.OSA3_3_2/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage3.OSA3_3.layers.3.OSA3_3_3/conv.weight[0m
  [35mbackbone.bottom_up.stage3.OSA3_3.layers.3.OSA3_3_3/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage3.OSA3_3.layers.4.OSA3_3_4/conv.weight[0m
  [35mbackbone.bottom_up.stage3.OSA3_3.layers.4.OSA3_3_4/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage3.OSA3_3.concat.OSA3_3_concat/conv.weight[0m
  [35mbackbone.bottom_up.stage3.OSA3_3.concat.OSA3_3_concat/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage3.OSA3_3.ese.fc.{weight, bias}[0m
  [35mbackbone.bottom_up.stage4.OSA4_1.layers.0.OSA4_1_0/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_1.layers.0.OSA4_1_0/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_1.layers.1.OSA4_1_1/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_1.layers.1.OSA4_1_1/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_1.layers.2.OSA4_1_2/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_1.layers.2.OSA4_1_2/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_1.layers.3.OSA4_1_3/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_1.layers.3.OSA4_1_3/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_1.layers.4.OSA4_1_4/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_1.layers.4.OSA4_1_4/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_1.concat.OSA4_1_concat/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_1.concat.OSA4_1_concat/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_1.ese.fc.{weight, bias}[0m
  [35mbackbone.bottom_up.stage4.OSA4_2.layers.0.OSA4_2_0/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_2.layers.0.OSA4_2_0/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_2.layers.1.OSA4_2_1/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_2.layers.1.OSA4_2_1/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_2.layers.2.OSA4_2_2/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_2.layers.2.OSA4_2_2/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_2.layers.3.OSA4_2_3/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_2.layers.3.OSA4_2_3/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_2.layers.4.OSA4_2_4/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_2.layers.4.OSA4_2_4/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_2.concat.OSA4_2_concat/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_2.concat.OSA4_2_concat/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_2.ese.fc.{weight, bias}[0m
  [35mbackbone.bottom_up.stage4.OSA4_3.layers.0.OSA4_3_0/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_3.layers.0.OSA4_3_0/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_3.layers.1.OSA4_3_1/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_3.layers.1.OSA4_3_1/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_3.layers.2.OSA4_3_2/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_3.layers.2.OSA4_3_2/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_3.layers.3.OSA4_3_3/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_3.layers.3.OSA4_3_3/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_3.layers.4.OSA4_3_4/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_3.layers.4.OSA4_3_4/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_3.concat.OSA4_3_concat/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_3.concat.OSA4_3_concat/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_3.ese.fc.{weight, bias}[0m
  [35mbackbone.bottom_up.stage4.OSA4_4.layers.0.OSA4_4_0/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_4.layers.0.OSA4_4_0/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_4.layers.1.OSA4_4_1/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_4.layers.1.OSA4_4_1/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_4.layers.2.OSA4_4_2/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_4.layers.2.OSA4_4_2/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_4.layers.3.OSA4_4_3/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_4.layers.3.OSA4_4_3/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_4.layers.4.OSA4_4_4/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_4.layers.4.OSA4_4_4/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_4.concat.OSA4_4_concat/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_4.concat.OSA4_4_concat/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_4.ese.fc.{weight, bias}[0m
  [35mbackbone.bottom_up.stage4.OSA4_5.layers.0.OSA4_5_0/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_5.layers.0.OSA4_5_0/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_5.layers.1.OSA4_5_1/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_5.layers.1.OSA4_5_1/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_5.layers.2.OSA4_5_2/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_5.layers.2.OSA4_5_2/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_5.layers.3.OSA4_5_3/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_5.layers.3.OSA4_5_3/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_5.layers.4.OSA4_5_4/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_5.layers.4.OSA4_5_4/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_5.concat.OSA4_5_concat/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_5.concat.OSA4_5_concat/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_5.ese.fc.{weight, bias}[0m
  [35mbackbone.bottom_up.stage4.OSA4_6.layers.0.OSA4_6_0/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_6.layers.0.OSA4_6_0/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_6.layers.1.OSA4_6_1/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_6.layers.1.OSA4_6_1/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_6.layers.2.OSA4_6_2/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_6.layers.2.OSA4_6_2/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_6.layers.3.OSA4_6_3/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_6.layers.3.OSA4_6_3/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_6.layers.4.OSA4_6_4/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_6.layers.4.OSA4_6_4/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_6.concat.OSA4_6_concat/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_6.concat.OSA4_6_concat/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_6.ese.fc.{weight, bias}[0m
  [35mbackbone.bottom_up.stage4.OSA4_7.layers.0.OSA4_7_0/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_7.layers.0.OSA4_7_0/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_7.layers.1.OSA4_7_1/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_7.layers.1.OSA4_7_1/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_7.layers.2.OSA4_7_2/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_7.layers.2.OSA4_7_2/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_7.layers.3.OSA4_7_3/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_7.layers.3.OSA4_7_3/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_7.layers.4.OSA4_7_4/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_7.layers.4.OSA4_7_4/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_7.concat.OSA4_7_concat/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_7.concat.OSA4_7_concat/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_7.ese.fc.{weight, bias}[0m
  [35mbackbone.bottom_up.stage4.OSA4_8.layers.0.OSA4_8_0/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_8.layers.0.OSA4_8_0/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_8.layers.1.OSA4_8_1/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_8.layers.1.OSA4_8_1/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_8.layers.2.OSA4_8_2/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_8.layers.2.OSA4_8_2/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_8.layers.3.OSA4_8_3/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_8.layers.3.OSA4_8_3/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_8.layers.4.OSA4_8_4/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_8.layers.4.OSA4_8_4/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_8.concat.OSA4_8_concat/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_8.concat.OSA4_8_concat/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_8.ese.fc.{weight, bias}[0m
  [35mbackbone.bottom_up.stage4.OSA4_9.layers.0.OSA4_9_0/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_9.layers.0.OSA4_9_0/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_9.layers.1.OSA4_9_1/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_9.layers.1.OSA4_9_1/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_9.layers.2.OSA4_9_2/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_9.layers.2.OSA4_9_2/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_9.layers.3.OSA4_9_3/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_9.layers.3.OSA4_9_3/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_9.layers.4.OSA4_9_4/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_9.layers.4.OSA4_9_4/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_9.concat.OSA4_9_concat/conv.weight[0m
  [35mbackbone.bottom_up.stage4.OSA4_9.concat.OSA4_9_concat/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage4.OSA4_9.ese.fc.{weight, bias}[0m
  [35mbackbone.bottom_up.stage5.OSA5_1.layers.0.OSA5_1_0/conv.weight[0m
  [35mbackbone.bottom_up.stage5.OSA5_1.layers.0.OSA5_1_0/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage5.OSA5_1.layers.1.OSA5_1_1/conv.weight[0m
  [35mbackbone.bottom_up.stage5.OSA5_1.layers.1.OSA5_1_1/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage5.OSA5_1.layers.2.OSA5_1_2/conv.weight[0m
  [35mbackbone.bottom_up.stage5.OSA5_1.layers.2.OSA5_1_2/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage5.OSA5_1.layers.3.OSA5_1_3/conv.weight[0m
  [35mbackbone.bottom_up.stage5.OSA5_1.layers.3.OSA5_1_3/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage5.OSA5_1.layers.4.OSA5_1_4/conv.weight[0m
  [35mbackbone.bottom_up.stage5.OSA5_1.layers.4.OSA5_1_4/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage5.OSA5_1.concat.OSA5_1_concat/conv.weight[0m
  [35mbackbone.bottom_up.stage5.OSA5_1.concat.OSA5_1_concat/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage5.OSA5_1.ese.fc.{weight, bias}[0m
  [35mbackbone.bottom_up.stage5.OSA5_2.layers.0.OSA5_2_0/conv.weight[0m
  [35mbackbone.bottom_up.stage5.OSA5_2.layers.0.OSA5_2_0/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage5.OSA5_2.layers.1.OSA5_2_1/conv.weight[0m
  [35mbackbone.bottom_up.stage5.OSA5_2.layers.1.OSA5_2_1/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage5.OSA5_2.layers.2.OSA5_2_2/conv.weight[0m
  [35mbackbone.bottom_up.stage5.OSA5_2.layers.2.OSA5_2_2/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage5.OSA5_2.layers.3.OSA5_2_3/conv.weight[0m
  [35mbackbone.bottom_up.stage5.OSA5_2.layers.3.OSA5_2_3/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage5.OSA5_2.layers.4.OSA5_2_4/conv.weight[0m
  [35mbackbone.bottom_up.stage5.OSA5_2.layers.4.OSA5_2_4/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage5.OSA5_2.concat.OSA5_2_concat/conv.weight[0m
  [35mbackbone.bottom_up.stage5.OSA5_2.concat.OSA5_2_concat/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage5.OSA5_2.ese.fc.{weight, bias}[0m
  [35mbackbone.bottom_up.stage5.OSA5_3.layers.0.OSA5_3_0/conv.weight[0m
  [35mbackbone.bottom_up.stage5.OSA5_3.layers.0.OSA5_3_0/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage5.OSA5_3.layers.1.OSA5_3_1/conv.weight[0m
  [35mbackbone.bottom_up.stage5.OSA5_3.layers.1.OSA5_3_1/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage5.OSA5_3.layers.2.OSA5_3_2/conv.weight[0m
  [35mbackbone.bottom_up.stage5.OSA5_3.layers.2.OSA5_3_2/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage5.OSA5_3.layers.3.OSA5_3_3/conv.weight[0m
  [35mbackbone.bottom_up.stage5.OSA5_3.layers.3.OSA5_3_3/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage5.OSA5_3.layers.4.OSA5_3_4/conv.weight[0m
  [35mbackbone.bottom_up.stage5.OSA5_3.layers.4.OSA5_3_4/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage5.OSA5_3.concat.OSA5_3_concat/conv.weight[0m
  [35mbackbone.bottom_up.stage5.OSA5_3.concat.OSA5_3_concat/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stage5.OSA5_3.ese.fc.{weight, bias}[0m
  [35mbackbone.bottom_up.stem.stem_1/conv.weight[0m
  [35mbackbone.bottom_up.stem.stem_1/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stem.stem_2/conv.weight[0m
  [35mbackbone.bottom_up.stem.stem_2/norm.{weight, bias, running_mean, running_var}[0m
  [35mbackbone.bottom_up.stem.stem_3/conv.weight[0m
  [35mbackbone.bottom_up.stem.stem_3/norm.{weight, bias, running_mean, running_var}[0m
  [35mproposal_generator.fcos_head.cls_tower.0.{weight, bias}[0m
  [35mproposal_generator.fcos_head.cls_tower.1.{weight, bias}[0m
  [35mproposal_generator.fcos_head.cls_tower.3.{weight, bias}[0m
  [35mproposal_generator.fcos_head.cls_tower.4.{weight, bias}[0m
  [35mproposal_generator.fcos_head.cls_tower.6.{weight, bias}[0m
  [35mproposal_generator.fcos_head.cls_tower.7.{weight, bias}[0m
  [35mproposal_generator.fcos_head.cls_tower.9.{weight, bias}[0m
  [35mproposal_generator.fcos_head.cls_tower.10.{weight, bias}[0m
  [35mproposal_generator.fcos_head.bbox_tower.0.{weight, bias}[0m
  [35mproposal_generator.fcos_head.bbox_tower.1.{weight, bias}[0m
  [35mproposal_generator.fcos_head.bbox_tower.3.{weight, bias}[0m
  [35mproposal_generator.fcos_head.bbox_tower.4.{weight, bias}[0m
  [35mproposal_generator.fcos_head.bbox_tower.6.{weight, bias}[0m
  [35mproposal_generator.fcos_head.bbox_tower.7.{weight, bias}[0m
  [35mproposal_generator.fcos_head.bbox_tower.9.{weight, bias}[0m
  [35mproposal_generator.fcos_head.bbox_tower.10.{weight, bias}[0m
  [35mproposal_generator.fcos_head.cls_logits.{weight, bias}[0m
  [35mproposal_generator.fcos_head.bbox_pred.{weight, bias}[0m
  [35mproposal_generator.fcos_head.ctrness.{weight, bias}[0m
  [35mproposal_generator.fcos_head.scales.0.scale[0m
  [35mproposal_generator.fcos_head.scales.1.scale[0m
  [35mproposal_generator.fcos_head.scales.2.scale[0m
  [35mproposal_generator.fcos_head.scales.3.scale[0m
  [35mproposal_generator.fcos_head.scales.4.scale[0m
  [35mroi_heads.maskiou_head.maskiou_fcn1.{weight, bias}[0m
  [35mroi_heads.maskiou_head.maskiou_fcn2.{weight, bias}[0m
  [35mroi_heads.maskiou_head.maskiou_fcn3.{weight, bias}[0m
  [35mroi_heads.maskiou_head.maskiou_fcn4.{weight, bias}[0m
  [35mroi_heads.maskiou_head.maskiou_fc1.{weight, bias}[0m
  [35mroi_heads.maskiou_head.maskiou_fc2.{weight, bias}[0m
  [35mroi_heads.maskiou_head.maskiou.{weight, bias}[0m
  [35mroi_heads.mask_head.spatialAtt.conv.weight[0m
[01/11 13:53:30] detectron2.data.datasets.coco INFO: Loading /lunit/home/stevekang/decentAI/cellDetection/MCF7/LIVECell_dataset_2021/annotations/LIVECell_single_cells/mcf7/train.json takes 3.90 seconds.
[01/11 13:53:30] detectron2.data.datasets.coco INFO: Loaded 469 images in COCO format from /lunit/home/stevekang/decentAI/cellDetection/MCF7/LIVECell_dataset_2021/annotations/LIVECell_single_cells/mcf7/train.json
[01/11 13:53:32] detectron2.data.build INFO: Distribution of instances among all 1 categories:
[36m|  category  | #instances   |
|:----------:|:-------------|
|    cell    | 212688       |
|            |              |[0m
[01/11 13:53:32] detectron2.data.common INFO: Serializing 469 elements to byte tensors and concatenating them all ...
[01/11 13:53:32] detectron2.data.common INFO: Serialized dataset takes 77.04 MiB
[01/11 13:53:36] detectron2.evaluation.evaluator INFO: Start inference on 59 images
[01/11 13:53:46] detectron2.evaluation.evaluator INFO: Inference done 11/59. 0.0568 s / img. ETA=0:00:03
[01/11 13:53:50] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:04.551642 (0.084290 s / img per device, on 8 devices)
[01/11 13:53:50] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:03 (0.058127 s / img per device, on 8 devices)
[01/11 14:02:45] detectron2 INFO: Rank of current process: 4. World size: 8
[01/11 14:02:46] detectron2 INFO: Environment info:
------------------------  ---------------------------------------------------------------------------------------------
sys.platform              linux
Python                    3.10.8 (main, Nov 24 2022, 14:13:03) [GCC 11.2.0]
numpy                     1.23.5
detectron2                0.1.1 @/lunit/home/stevekang/decentAI/cellDetection/detectron2-ResNeSt/detectron2
detectron2 compiler       GCC 5.4
detectron2 CUDA compiler  10.1
detectron2 arch flags     sm_61
DETECTRON2_ENV_MODULE     <not set>
PyTorch                   1.12.0+cu102 @/home/stevekang/anaconda3/envs/resnest/lib/python3.10/site-packages/torch
PyTorch debug build       False
CUDA available            True
GPU 0,1,2,3,4,5,6,7       TITAN Xp
CUDA_HOME                 /usr/local/cuda
NVCC                      Cuda compilation tools, release 10.1, V10.1.243
Pillow                    9.3.0
torchvision               0.13.0+cu102 @/home/stevekang/anaconda3/envs/resnest/lib/python3.10/site-packages/torchvision
torchvision arch flags    sm_35, sm_50, sm_60, sm_70, sm_75
cv2                       4.6.0
------------------------  ---------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/11 14:02:46] detectron2 INFO: Command line arguments: Namespace(config_file='../configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml', resume=False, eval_only=True, num_gpus=8, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:51261', opts=['MODEL.WEIGHTS', '../LIVECell_anchor_based_mcf7_model.pth'])
[01/11 14:02:46] detectron2 INFO: Contents of args.config_file=../configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml:
_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  MASK_ON: True
  RESNETS:
    DEPTH: 50

[01/11 14:02:46] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('MCF7',)
  TRAIN: ('MCF7',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32], [64], [128], [256], [512]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: True
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    AVD: False
    AVG_DOWN: False
    BOTTLENECK_WIDTH: 64
    DEEP_STEM: False
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res2', 'res3', 'res4', 'res5']
    RADIX: 1
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: 
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: ../LIVECell_anchor_based_mcf7_model.pth
OUTPUT_DIR: ./output_mcd_fix
SEED: -1
SOLVER:
  BASE_LR: 0.02
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 90000
  MOMENTUM: 0.9
  STEPS: (60000, 80000)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[01/11 14:02:46] detectron2.utils.env INFO: Using a generated random seed 46151991
[01/11 14:02:46] detectron2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (dropout): Dropout(p=0.3, inplace=False)
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=81, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=320, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (predictor): Conv2d(256, 80, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[01/11 14:02:46] fvcore.common.checkpoint INFO: Loading checkpoint from ../LIVECell_anchor_based_mcf7_model.pth
[01/11 14:02:47] fvcore.common.checkpoint WARNING: 'backbone.bottom_up.res2.0.shortcut.weight' has shape (256, 128, 1, 1) in the checkpoint but (256, 64, 1, 1) in the model! Skipped.
[01/11 14:02:47] fvcore.common.checkpoint WARNING: 'backbone.bottom_up.res2.0.conv1.weight' has shape (64, 128, 1, 1) in the checkpoint but (64, 64, 1, 1) in the model! Skipped.
[01/11 14:02:47] fvcore.common.checkpoint WARNING: 'proposal_generator.anchor_generator.cell_anchors.0' has shape (5, 4) in the checkpoint but (3, 4) in the model! Skipped.
[01/11 14:02:47] fvcore.common.checkpoint WARNING: 'proposal_generator.anchor_generator.cell_anchors.1' has shape (5, 4) in the checkpoint but (3, 4) in the model! Skipped.
[01/11 14:02:47] fvcore.common.checkpoint WARNING: 'proposal_generator.anchor_generator.cell_anchors.2' has shape (5, 4) in the checkpoint but (3, 4) in the model! Skipped.
[01/11 14:02:47] fvcore.common.checkpoint WARNING: 'proposal_generator.anchor_generator.cell_anchors.3' has shape (5, 4) in the checkpoint but (3, 4) in the model! Skipped.
[01/11 14:02:47] fvcore.common.checkpoint WARNING: 'proposal_generator.anchor_generator.cell_anchors.4' has shape (5, 4) in the checkpoint but (3, 4) in the model! Skipped.
[01/11 14:02:47] fvcore.common.checkpoint WARNING: 'proposal_generator.rpn_head.objectness_logits.weight' has shape (5, 256, 1, 1) in the checkpoint but (3, 256, 1, 1) in the model! Skipped.
[01/11 14:02:47] fvcore.common.checkpoint WARNING: 'proposal_generator.rpn_head.objectness_logits.bias' has shape (5,) in the checkpoint but (3,) in the model! Skipped.
[01/11 14:02:47] fvcore.common.checkpoint WARNING: 'proposal_generator.rpn_head.anchor_deltas.weight' has shape (20, 256, 1, 1) in the checkpoint but (12, 256, 1, 1) in the model! Skipped.
[01/11 14:02:47] fvcore.common.checkpoint WARNING: 'proposal_generator.rpn_head.anchor_deltas.bias' has shape (20,) in the checkpoint but (12,) in the model! Skipped.
[01/11 14:02:47] fvcore.common.checkpoint WARNING: 'roi_heads.mask_head.predictor.weight' has shape (1, 256, 1, 1) in the checkpoint but (80, 256, 1, 1) in the model! Skipped.
[01/11 14:02:47] fvcore.common.checkpoint WARNING: 'roi_heads.mask_head.predictor.bias' has shape (1,) in the checkpoint but (80,) in the model! Skipped.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res2.0.shortcut.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res2.0.conv1.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res2.0.conv3.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res2.1.conv1.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res2.1.conv3.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res2.2.conv1.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res2.2.conv3.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.0.shortcut.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.0.conv1.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.0.conv3.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.1.conv1.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.1.conv3.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.2.conv1.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.2.conv3.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.3.conv1.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res3.3.conv3.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.0.shortcut.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.0.conv1.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.0.conv3.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.1.conv1.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.1.conv3.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.2.conv1.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.2.conv3.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.3.conv1.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.3.conv3.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.4.conv1.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.4.conv3.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.5.conv1.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res4.5.conv3.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res5.0.shortcut.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res5.0.conv1.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res5.0.conv3.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res5.1.conv1.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res5.1.conv3.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res5.2.conv1.norm is upgraded to version 3.
[01/11 14:02:47] detectron2.layers.batch_norm INFO: FrozenBatchNorm backbone.bottom_up.res5.2.conv3.norm is upgraded to version 3.
[01/11 14:02:47] fvcore.common.checkpoint INFO: Some model parameters are not in the checkpoint:
  [34mbackbone.bottom_up.res5.2.conv2.norm.{weight, bias}[0m
  [34mroi_heads.mask_head.mask_fcn4.bias[0m
  [34mbackbone.bottom_up.res2.0.conv2.weight[0m
  [34mbackbone.bottom_up.res5.1.conv2.weight[0m
  [34mbackbone.bottom_up.res3.3.conv2.norm.{bias, weight}[0m
  [34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
  [34mbackbone.bottom_up.res4.3.conv2.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res2.2.conv2.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res2.0.shortcut.weight[0m
  [34mbackbone.bottom_up.res2.1.conv2.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res2.0.conv2.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res5.0.conv2.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res4.0.conv2.weight[0m
  [34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
  [34mproposal_generator.anchor_generator.cell_anchors.{1, 0, 4, 2, 3}[0m
  [34mbackbone.bottom_up.res2.0.conv1.weight[0m
  [34mbackbone.fpn_output3.bias[0m
  [34mbackbone.bottom_up.res4.5.conv2.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res4.2.conv2.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.stem.conv1.weight[0m
  [34mbackbone.bottom_up.res4.2.conv2.weight[0m
  [34mbackbone.bottom_up.stem.conv1.norm.{bias, weight}[0m
  [34mroi_heads.box_head.fc1.{weight, bias}[0m
  [34mbackbone.bottom_up.res3.2.conv2.weight[0m
  [34mbackbone.fpn_lateral4.bias[0m
  [34mbackbone.bottom_up.res3.1.conv2.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res2.2.conv2.weight[0m
  [34mbackbone.bottom_up.res4.1.conv2.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res3.2.conv2.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res4.4.conv2.norm.{weight, bias}[0m
  [34mbackbone.bottom_up.res3.0.conv2.norm.{bias, weight}[0m
  [34mbackbone.bottom_up.res3.1.conv2.weight[0m
  [34mbackbone.bottom_up.res4.3.conv2.weight[0m
  [34mbackbone.fpn_lateral5.bias[0m
  [34mbackbone.fpn_output2.bias[0m
  [34mbackbone.bottom_up.res2.1.conv2.weight[0m
  [34mproposal_generator.rpn_head.objectness_logits.{weight, bias}[0m
  [34mbackbone.bottom_up.res4.1.conv2.weight[0m
  [34mbackbone.fpn_output4.bias[0m
  [34mroi_heads.box_head.fc2.{bias, weight}[0m
  [34mbackbone.bottom_up.res3.0.conv2.weight[0m
  [34mroi_heads.mask_head.mask_fcn1.bias[0m
  [34mbackbone.bottom_up.res3.3.conv2.weight[0m
  [34mroi_heads.mask_head.mask_fcn2.bias[0m
  [34mroi_heads.mask_head.predictor.{bias, weight}[0m
  [34mroi_heads.mask_head.mask_fcn3.bias[0m
  [34mbackbone.bottom_up.res4.0.conv2.norm.{weight, bias}[0m
  [34mbackbone.fpn_lateral2.bias[0m
  [34mbackbone.bottom_up.res5.1.conv2.norm.{bias, weight}[0m
  [34mbackbone.fpn_output5.bias[0m
  [34mbackbone.bottom_up.res5.2.conv2.weight[0m
  [34mbackbone.bottom_up.res4.4.conv2.weight[0m
  [34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
  [34mbackbone.bottom_up.res5.0.conv2.weight[0m
  [34mbackbone.fpn_lateral3.bias[0m
  [34mbackbone.bottom_up.res4.5.conv2.weight[0m
[01/11 14:02:47] fvcore.common.checkpoint INFO: The checkpoint contains parameters not used by the model:
  [35mpixel_mean[0m
  [35mpixel_std[0m
  [35mbackbone.fpn_lateral2.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.fpn_output2.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.fpn_lateral3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.fpn_output3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.fpn_lateral4.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.fpn_output4.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.fpn_lateral5.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.fpn_output5.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.stem.conv1_1.weight[0m
  [35mbackbone.bottom_up.stem.conv1_1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.stem.conv1_2.weight[0m
  [35mbackbone.bottom_up.stem.conv1_2.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.stem.conv1_3.weight[0m
  [35mbackbone.bottom_up.stem.conv1_3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res2.0.shortcut.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res2.0.conv1.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res2.0.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res2.0.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res2.0.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res2.0.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res2.0.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res2.0.conv3.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res2.1.conv1.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res2.1.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res2.1.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res2.1.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res2.1.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res2.1.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res2.1.conv3.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res2.2.conv1.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res2.2.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res2.2.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res2.2.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res2.2.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res2.2.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res2.2.conv3.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res3.4.conv1.weight[0m
  [35mbackbone.bottom_up.res3.4.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.4.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.4.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.4.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.4.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.4.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.4.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.4.conv3.weight[0m
  [35mbackbone.bottom_up.res3.4.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.5.conv1.weight[0m
  [35mbackbone.bottom_up.res3.5.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.5.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.5.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.5.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.5.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.5.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.5.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.5.conv3.weight[0m
  [35mbackbone.bottom_up.res3.5.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.6.conv1.weight[0m
  [35mbackbone.bottom_up.res3.6.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.6.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.6.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.6.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.6.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.6.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.6.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.6.conv3.weight[0m
  [35mbackbone.bottom_up.res3.6.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.7.conv1.weight[0m
  [35mbackbone.bottom_up.res3.7.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.7.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.7.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.7.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.7.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.7.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.7.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.7.conv3.weight[0m
  [35mbackbone.bottom_up.res3.7.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.8.conv1.weight[0m
  [35mbackbone.bottom_up.res3.8.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.8.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.8.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.8.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.8.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.8.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.8.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.8.conv3.weight[0m
  [35mbackbone.bottom_up.res3.8.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.9.conv1.weight[0m
  [35mbackbone.bottom_up.res3.9.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.9.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.9.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.9.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.9.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.9.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.9.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.9.conv3.weight[0m
  [35mbackbone.bottom_up.res3.9.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.10.conv1.weight[0m
  [35mbackbone.bottom_up.res3.10.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.10.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.10.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.10.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.10.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.10.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.10.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.10.conv3.weight[0m
  [35mbackbone.bottom_up.res3.10.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.11.conv1.weight[0m
  [35mbackbone.bottom_up.res3.11.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.11.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.11.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.11.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.11.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.11.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.11.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.11.conv3.weight[0m
  [35mbackbone.bottom_up.res3.11.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.12.conv1.weight[0m
  [35mbackbone.bottom_up.res3.12.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.12.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.12.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.12.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.12.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.12.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.12.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.12.conv3.weight[0m
  [35mbackbone.bottom_up.res3.12.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.13.conv1.weight[0m
  [35mbackbone.bottom_up.res3.13.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.13.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.13.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.13.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.13.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.13.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.13.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.13.conv3.weight[0m
  [35mbackbone.bottom_up.res3.13.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.14.conv1.weight[0m
  [35mbackbone.bottom_up.res3.14.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.14.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.14.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.14.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.14.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.14.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.14.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.14.conv3.weight[0m
  [35mbackbone.bottom_up.res3.14.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.15.conv1.weight[0m
  [35mbackbone.bottom_up.res3.15.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.15.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.15.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.15.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.15.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.15.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.15.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.15.conv3.weight[0m
  [35mbackbone.bottom_up.res3.15.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.16.conv1.weight[0m
  [35mbackbone.bottom_up.res3.16.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.16.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.16.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.16.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.16.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.16.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.16.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.16.conv3.weight[0m
  [35mbackbone.bottom_up.res3.16.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.17.conv1.weight[0m
  [35mbackbone.bottom_up.res3.17.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.17.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.17.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.17.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.17.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.17.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.17.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.17.conv3.weight[0m
  [35mbackbone.bottom_up.res3.17.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.18.conv1.weight[0m
  [35mbackbone.bottom_up.res3.18.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.18.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.18.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.18.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.18.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.18.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.18.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.18.conv3.weight[0m
  [35mbackbone.bottom_up.res3.18.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.19.conv1.weight[0m
  [35mbackbone.bottom_up.res3.19.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.19.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.19.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.19.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.19.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.19.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.19.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.19.conv3.weight[0m
  [35mbackbone.bottom_up.res3.19.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.20.conv1.weight[0m
  [35mbackbone.bottom_up.res3.20.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.20.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.20.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.20.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.20.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.20.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.20.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.20.conv3.weight[0m
  [35mbackbone.bottom_up.res3.20.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.21.conv1.weight[0m
  [35mbackbone.bottom_up.res3.21.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.21.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.21.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.21.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.21.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.21.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.21.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.21.conv3.weight[0m
  [35mbackbone.bottom_up.res3.21.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.22.conv1.weight[0m
  [35mbackbone.bottom_up.res3.22.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.22.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.22.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.22.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.22.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.22.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.22.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.22.conv3.weight[0m
  [35mbackbone.bottom_up.res3.22.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.23.conv1.weight[0m
  [35mbackbone.bottom_up.res3.23.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.23.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.23.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.23.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.23.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.23.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.23.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.23.conv3.weight[0m
  [35mbackbone.bottom_up.res3.23.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.0.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.0.shortcut.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res3.0.conv1.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res3.0.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.0.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.0.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.0.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.0.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.0.conv3.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res3.1.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.1.conv1.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res3.1.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.1.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.1.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.1.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.1.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.1.conv3.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res3.2.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.2.conv1.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res3.2.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.2.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.2.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.2.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.2.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.2.conv3.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res3.3.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.3.conv1.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res3.3.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res3.3.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.3.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.3.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res3.3.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res3.3.conv3.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res4.6.conv1.weight[0m
  [35mbackbone.bottom_up.res4.6.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.6.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.6.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.6.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.6.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.6.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.6.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.6.conv3.weight[0m
  [35mbackbone.bottom_up.res4.6.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.7.conv1.weight[0m
  [35mbackbone.bottom_up.res4.7.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.7.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.7.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.7.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.7.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.7.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.7.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.7.conv3.weight[0m
  [35mbackbone.bottom_up.res4.7.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.8.conv1.weight[0m
  [35mbackbone.bottom_up.res4.8.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.8.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.8.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.8.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.8.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.8.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.8.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.8.conv3.weight[0m
  [35mbackbone.bottom_up.res4.8.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.9.conv1.weight[0m
  [35mbackbone.bottom_up.res4.9.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.9.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.9.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.9.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.9.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.9.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.9.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.9.conv3.weight[0m
  [35mbackbone.bottom_up.res4.9.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.10.conv1.weight[0m
  [35mbackbone.bottom_up.res4.10.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.10.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.10.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.10.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.10.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.10.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.10.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.10.conv3.weight[0m
  [35mbackbone.bottom_up.res4.10.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.11.conv1.weight[0m
  [35mbackbone.bottom_up.res4.11.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.11.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.11.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.11.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.11.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.11.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.11.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.11.conv3.weight[0m
  [35mbackbone.bottom_up.res4.11.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.12.conv1.weight[0m
  [35mbackbone.bottom_up.res4.12.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.12.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.12.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.12.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.12.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.12.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.12.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.12.conv3.weight[0m
  [35mbackbone.bottom_up.res4.12.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.13.conv1.weight[0m
  [35mbackbone.bottom_up.res4.13.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.13.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.13.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.13.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.13.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.13.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.13.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.13.conv3.weight[0m
  [35mbackbone.bottom_up.res4.13.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.14.conv1.weight[0m
  [35mbackbone.bottom_up.res4.14.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.14.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.14.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.14.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.14.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.14.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.14.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.14.conv3.weight[0m
  [35mbackbone.bottom_up.res4.14.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.15.conv1.weight[0m
  [35mbackbone.bottom_up.res4.15.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.15.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.15.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.15.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.15.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.15.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.15.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.15.conv3.weight[0m
  [35mbackbone.bottom_up.res4.15.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.16.conv1.weight[0m
  [35mbackbone.bottom_up.res4.16.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.16.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.16.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.16.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.16.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.16.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.16.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.16.conv3.weight[0m
  [35mbackbone.bottom_up.res4.16.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.17.conv1.weight[0m
  [35mbackbone.bottom_up.res4.17.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.17.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.17.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.17.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.17.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.17.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.17.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.17.conv3.weight[0m
  [35mbackbone.bottom_up.res4.17.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.18.conv1.weight[0m
  [35mbackbone.bottom_up.res4.18.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.18.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.18.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.18.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.18.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.18.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.18.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.18.conv3.weight[0m
  [35mbackbone.bottom_up.res4.18.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.19.conv1.weight[0m
  [35mbackbone.bottom_up.res4.19.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.19.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.19.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.19.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.19.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.19.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.19.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.19.conv3.weight[0m
  [35mbackbone.bottom_up.res4.19.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.20.conv1.weight[0m
  [35mbackbone.bottom_up.res4.20.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.20.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.20.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.20.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.20.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.20.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.20.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.20.conv3.weight[0m
  [35mbackbone.bottom_up.res4.20.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.21.conv1.weight[0m
  [35mbackbone.bottom_up.res4.21.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.21.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.21.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.21.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.21.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.21.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.21.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.21.conv3.weight[0m
  [35mbackbone.bottom_up.res4.21.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.22.conv1.weight[0m
  [35mbackbone.bottom_up.res4.22.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.22.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.22.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.22.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.22.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.22.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.22.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.22.conv3.weight[0m
  [35mbackbone.bottom_up.res4.22.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.23.conv1.weight[0m
  [35mbackbone.bottom_up.res4.23.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.23.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.23.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.23.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.23.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.23.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.23.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.23.conv3.weight[0m
  [35mbackbone.bottom_up.res4.23.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.24.conv1.weight[0m
  [35mbackbone.bottom_up.res4.24.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.24.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.24.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.24.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.24.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.24.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.24.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.24.conv3.weight[0m
  [35mbackbone.bottom_up.res4.24.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.25.conv1.weight[0m
  [35mbackbone.bottom_up.res4.25.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.25.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.25.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.25.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.25.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.25.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.25.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.25.conv3.weight[0m
  [35mbackbone.bottom_up.res4.25.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.26.conv1.weight[0m
  [35mbackbone.bottom_up.res4.26.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.26.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.26.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.26.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.26.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.26.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.26.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.26.conv3.weight[0m
  [35mbackbone.bottom_up.res4.26.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.27.conv1.weight[0m
  [35mbackbone.bottom_up.res4.27.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.27.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.27.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.27.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.27.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.27.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.27.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.27.conv3.weight[0m
  [35mbackbone.bottom_up.res4.27.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.28.conv1.weight[0m
  [35mbackbone.bottom_up.res4.28.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.28.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.28.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.28.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.28.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.28.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.28.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.28.conv3.weight[0m
  [35mbackbone.bottom_up.res4.28.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.29.conv1.weight[0m
  [35mbackbone.bottom_up.res4.29.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.29.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.29.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.29.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.29.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.29.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.29.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.29.conv3.weight[0m
  [35mbackbone.bottom_up.res4.29.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.30.conv1.weight[0m
  [35mbackbone.bottom_up.res4.30.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.30.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.30.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.30.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.30.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.30.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.30.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.30.conv3.weight[0m
  [35mbackbone.bottom_up.res4.30.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.31.conv1.weight[0m
  [35mbackbone.bottom_up.res4.31.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.31.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.31.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.31.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.31.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.31.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.31.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.31.conv3.weight[0m
  [35mbackbone.bottom_up.res4.31.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.32.conv1.weight[0m
  [35mbackbone.bottom_up.res4.32.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.32.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.32.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.32.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.32.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.32.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.32.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.32.conv3.weight[0m
  [35mbackbone.bottom_up.res4.32.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.33.conv1.weight[0m
  [35mbackbone.bottom_up.res4.33.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.33.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.33.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.33.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.33.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.33.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.33.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.33.conv3.weight[0m
  [35mbackbone.bottom_up.res4.33.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.34.conv1.weight[0m
  [35mbackbone.bottom_up.res4.34.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.34.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.34.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.34.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.34.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.34.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.34.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.34.conv3.weight[0m
  [35mbackbone.bottom_up.res4.34.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.35.conv1.weight[0m
  [35mbackbone.bottom_up.res4.35.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.35.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.35.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.35.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.35.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.35.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.35.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.35.conv3.weight[0m
  [35mbackbone.bottom_up.res4.35.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.0.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.0.shortcut.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res4.0.conv1.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res4.0.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.0.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.0.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.0.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.0.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.0.conv3.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res4.1.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.1.conv1.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res4.1.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.1.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.1.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.1.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.1.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.1.conv3.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res4.2.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.2.conv1.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res4.2.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.2.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.2.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.2.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.2.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.2.conv3.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res4.3.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.3.conv1.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res4.3.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.3.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.3.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.3.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.3.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.3.conv3.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res4.4.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.4.conv1.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res4.4.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.4.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.4.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.4.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.4.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.4.conv3.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res4.5.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.5.conv1.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res4.5.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res4.5.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.5.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.5.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res4.5.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res4.5.conv3.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res5.0.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res5.0.shortcut.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res5.0.conv1.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res5.0.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res5.0.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res5.0.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res5.0.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res5.0.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res5.0.conv3.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res5.1.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res5.1.conv1.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res5.1.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res5.1.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res5.1.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res5.1.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res5.1.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res5.1.conv3.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res5.2.conv2_offset.{weight, bias}[0m
  [35mbackbone.bottom_up.res5.2.conv1.norm.num_batches_tracked[0m
  [35mbackbone.bottom_up.res5.2.conv2.conv.weight[0m
  [35mbackbone.bottom_up.res5.2.conv2.bn0.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res5.2.conv2.fc1.{weight, bias}[0m
  [35mbackbone.bottom_up.res5.2.conv2.bn1.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mbackbone.bottom_up.res5.2.conv2.fc2.{weight, bias}[0m
  [35mbackbone.bottom_up.res5.2.conv3.norm.num_batches_tracked[0m
  [35mproposal_generator.anchor_generator.cell_anchors.5[0m
  [35mroi_heads.box_head.0.conv1.weight[0m
  [35mroi_heads.box_head.0.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mroi_heads.box_head.0.conv2.weight[0m
  [35mroi_heads.box_head.0.conv2.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mroi_heads.box_head.0.conv3.weight[0m
  [35mroi_heads.box_head.0.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mroi_heads.box_head.0.conv4.weight[0m
  [35mroi_heads.box_head.0.conv4.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mroi_heads.box_head.0.fc1.{weight, bias}[0m
  [35mroi_heads.box_head.1.conv1.weight[0m
  [35mroi_heads.box_head.1.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mroi_heads.box_head.1.conv2.weight[0m
  [35mroi_heads.box_head.1.conv2.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mroi_heads.box_head.1.conv3.weight[0m
  [35mroi_heads.box_head.1.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mroi_heads.box_head.1.conv4.weight[0m
  [35mroi_heads.box_head.1.conv4.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mroi_heads.box_head.1.fc1.{weight, bias}[0m
  [35mroi_heads.box_head.2.conv1.weight[0m
  [35mroi_heads.box_head.2.conv1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mroi_heads.box_head.2.conv2.weight[0m
  [35mroi_heads.box_head.2.conv2.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mroi_heads.box_head.2.conv3.weight[0m
  [35mroi_heads.box_head.2.conv3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mroi_heads.box_head.2.conv4.weight[0m
  [35mroi_heads.box_head.2.conv4.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mroi_heads.box_head.2.fc1.{weight, bias}[0m
  [35mroi_heads.box_predictor.0.cls_score.{weight, bias}[0m
  [35mroi_heads.box_predictor.0.bbox_pred.{weight, bias}[0m
  [35mroi_heads.box_predictor.1.cls_score.{weight, bias}[0m
  [35mroi_heads.box_predictor.1.bbox_pred.{weight, bias}[0m
  [35mroi_heads.box_predictor.2.cls_score.{weight, bias}[0m
  [35mroi_heads.box_predictor.2.bbox_pred.{weight, bias}[0m
  [35mroi_heads.mask_head.mask_fcn5.weight[0m
  [35mroi_heads.mask_head.mask_fcn5.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mroi_heads.mask_head.mask_fcn6.weight[0m
  [35mroi_heads.mask_head.mask_fcn6.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mroi_heads.mask_head.mask_fcn7.weight[0m
  [35mroi_heads.mask_head.mask_fcn7.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mroi_heads.mask_head.mask_fcn8.weight[0m
  [35mroi_heads.mask_head.mask_fcn8.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mroi_heads.mask_head.mask_fcn1.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mroi_heads.mask_head.mask_fcn2.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mroi_heads.mask_head.mask_fcn3.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
  [35mroi_heads.mask_head.mask_fcn4.norm.{weight, bias, running_mean, running_var, num_batches_tracked}[0m
[01/11 14:02:51] detectron2.data.datasets.coco INFO: Loading /lunit/home/stevekang/decentAI/cellDetection/MCF7/LIVECell_dataset_2021/annotations/LIVECell_single_cells/mcf7/train.json takes 3.30 seconds.
[01/11 14:02:51] detectron2.data.datasets.coco INFO: Loaded 469 images in COCO format from /lunit/home/stevekang/decentAI/cellDetection/MCF7/LIVECell_dataset_2021/annotations/LIVECell_single_cells/mcf7/train.json
[01/11 14:02:52] detectron2.data.build INFO: Distribution of instances among all 1 categories:
[36m|  category  | #instances   |
|:----------:|:-------------|
|    cell    | 212688       |
|            |              |[0m
[01/11 14:02:52] detectron2.data.common INFO: Serializing 469 elements to byte tensors and concatenating them all ...
[01/11 14:02:53] detectron2.data.common INFO: Serialized dataset takes 77.04 MiB
[01/11 14:02:56] detectron2.evaluation.evaluator INFO: Start inference on 59 images
[01/11 14:03:06] detectron2.evaluation.evaluator INFO: Inference done 11/59. 0.0595 s / img. ETA=0:00:02
[01/11 14:03:09] detectron2.evaluation.evaluator INFO: Total inference time: 0:00:03.795259 (0.070283 s / img per device, on 8 devices)
[01/11 14:03:09] detectron2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:03 (0.059858 s / img per device, on 8 devices)
